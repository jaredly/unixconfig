#!/usr/bin/env python

import os, sys
from os.path import exists, isdir, join
from os import chdir, getcwd
from subprocess import PIPE, Popen
from functools import partial

def c(line):
    p = Popen(line, shell=True, stdout=PIPE, stderr=PIPE)
    return p.stdout.read(), p.stderr.read()

def get_remote():
    out, err = c('git remote -v')
    if not out or not out.startswith('origin'):
        raise Exception('remote "origin" not found')
    origin = out.split('\n')[0][len('origin '):-len(' (fetch)')]
    return origin

def make_pages():
    if isdir('pages'):
        chdir('pages')
        return c('git push')

    if not isdir('.git'):
        raise Exception('Not in a git base dir')

    out = map(lambda a: a.strip(), c('git branch')[0].split('\n'))
    has_pages = 'gh-pages' in out

    remote = get_remote()

    c('git clone . pages')
    chdir('pages')
    if has_pages:
        # print 'has pages', out
        c('git checkout gh-pages')
    else:
        c('git checkout --orphan gh-pages')
        c('git rm -rf .')
        c('git clean -df')
        c('git commit --allow-empty -m "Initializing Pages"')
    c('git remote remove origin')
    c('git remote add origin ' + remote)
    c('git branch --set-upstream gh-pages origin/gh-pages')


if __name__ == '__main__':
    try:
        make_pages()
    except Exception as e:
        print 'Failed to create pages directory due to the following error:'
        import traceback
        print e
        print traceback.print_exc()


