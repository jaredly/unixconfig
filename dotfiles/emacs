;; -*- mode: emacs-lisp -*-

;; package lists

(require 'package)
(add-to-list 'package-archives 
  '("marmalade" .
    "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)


;; install my packages =)

(setq my-packages-file "~/.emacs.d/my-packages")
(load "~/.emacs.d/load-my-packages.el")

;; simulating vim tabs
;;   http://www.emacswiki.org/emacs/Evil

(load "elscreen" "ElScreen" t)
(elscreen-start)

;; making ESC do what I want for Evil
;;   http://stackoverflow.com/questions/8483182/emacs-evil-mode-best-practice

(add-to-list 'load-path "~/.emacs.d/evil")
(require 'evil)  
(evil-mode 1)
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(require 'projectile)
(projectile-global-mode)

(global-set-key (kbd "C-w") nil) ; disable "delete-word-backward)
(global-set-key (kbd "C-w t") 'elscreen-create) ;create tab
(global-set-key (kbd "C-w x") 'elscreen-kill) ;kill tab
(global-set-key (kbd "C-d") 'scroll-up-command) ;kill tab
(global-set-key (kbd "C-u") 'scroll-down-command) ;kill tab
(global-set-key (kbd "C-<left>") 'elscreen-previous) ;previous tab
(global-set-key (kbd "M-p") 'elscreen-previous) ;previous tab
(global-set-key (kbd "C-<right>") 'elscreen-next) ;next tab

; actually I want this to be "new window"
(global-set-key (kbd "M-n") 'new-frame) ;next tab

(define-key evil-normal-state-map (kbd "C-w") nil) ;create tab
(define-key evil-normal-state-map (kbd "C-w t") 'elscreen-create) ;create tab
(define-key evil-insert-state-map (kbd "C-w") nil) ;create tab
(define-key evil-insert-state-map (kbd "C-w t") 'elscreen-create) ;create tab
; (define-key evil-normal-state-map (kbd "C-w x") 'elscreen-kill) ;kill tab
; (define-key evil-normal-state-map (kbd "M-p") 'elscreen-previous) ;previous tab
; (define-key evil-normal-state-map (kbd "M-n") 'elscreen-next) ;next tab

; (load "~/.emacs.d/sublime-theme.el")
(setq evil-default-cursor t)
; (sublime-text-2)

(when (not (eq system-type 'darwin))
 (color-theme-initialize)
 (if (display-graphic-p)
  (color-theme-solarized-dark)
  (color-theme-solarized-light)))

;; smooth scrolling
;;   http://www.emacswiki.org/emacs/SmoothScrolling
    
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;; one line at a time
; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)
(setq-default scroll-up-aggressively 0.01
	      scroll-down-aggressively 0.01)

;; other random stuff

(linum-mode 1)
(global-linum-mode 1)

;; indents !! all over
(setq-default indent-tabs-mode nil)
(setq-default css-indent-offset 2)
(setq-default js-indent-level 2)
(setq-default sgml-basic-offset 2)
(setq-default c-basic-offset 2)


(require 'git-gutter-fringe)

(setq vc-follow-symlinks t)

;; gnus

(setq gnus-select-method '(nnimap "gmail"
                            (nnimap-address "imap.gmail.com")
                            (nnimap-server-port 993)
                            (nnimap-stream ssl)))

(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jabapyth@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-local-domain "jaredforsyth.com")

(setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

;; lisp editing

(show-paren-mode 1)
(setq show-paren-style 'parenthesis)

;; get the server running
(require 'server)
(unless (and (fboundp 'server-running-p)
	     (server-running-p))
  (server-start))

;; shell

(defun my-comint-init ()
  (setq comint-process-echoes t))
(add-hook 'comint-mode-hook 'my-comint-init)

;; org mode stuff


;; FamilySearch stuff

(setq auto-mode-alist (cons '("\\.ejs$" . html-mode) auto-mode-alist))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" "fbe33ece6b624df616d576a6a339ef06d5b2a1ad512c9b4fb39029a7725310b9" default)))
 '(inhibit-startup-screen t)
 '(initial-major-mode (quote org-mode))
 '(org-startup-indented t)
 '(show-paren-mode t)
 '(standard-indent 2)
 '(js-indent-level 2)
 '(tab-always-indent (quote complete)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

; (color-theme-initalize)
; (color-theme-solarized-dark)

; Either close the current elscreen, or if only one screen, use the ":wq" Evil
; command; this simulates the ":wq" behavior of Vim when used with tabs.
(defun vimlike-write-quit ()
  "Vimlike ':q' behavior: close current window if there are split windows;
otherwise, close current tab (elscreen)."
  (interactive)
  (let ((one-elscreen (elscreen-one-screen-p))
        (one-window (one-window-p))
        )
    (save-buffer)
    (cond
     ; if current tab has split windows in it, close the current live window
     ((not one-window)
      (delete-window) ; delete the current window
      (balance-windows) ; balance remaining windows
      nil)
     ; if there are multiple elscreens (tabs), close the current elscreen
     ((not one-elscreen)
      (elscreen-kill)
      nil)
     ; if there is only one elscreen, just try to quit (calling elscreen-kill
     ; will not work, because elscreen-kill fails if there is only one
     ; elscreen)
     (one-elscreen
      (evil-quit)
      nil)
     )))

; Either close the current elscreen, or if only one screen, use the ":q" Evil
; command; this simulates the ":q" behavior of Vim when used with tabs.
(defun vimlike-quit ()
  "Vimlike ':q' behavior: close current window if there are split windows;
otherwise, close current tab (elscreen)."
  (interactive)
  (let ((one-elscreen (elscreen-one-screen-p))
        (one-window (one-window-p))
        )
    (cond
     ; if current tab has split windows in it, close the current live window
     ((not one-window)
      (delete-window) ; delete the current window
      (balance-windows) ; balance remaining windows
      nil)
     ; if there are multiple elscreens (tabs), close the current elscreen
     ((not one-elscreen)
      (elscreen-kill)
      nil)
     ; if there is only one elscreen, just try to quit (calling elscreen-kill
     ; will not work, because elscreen-kill fails if there is only one
     ; elscreen)
     (one-elscreen
      (evil-quit)
      nil)
     )))

(evil-ex-define-cmd "q" 'vimlike-quit)
(evil-ex-define-cmd "tn[ew]" 'elscreen-create)
(evil-ex-define-cmd "wq" 'vimlike-write-quit)
(evil-ex-define-cmd "tabn[ew]" 'elscreen-create)

;; fixing mac :)
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)
(setq mac-control-modifier 'control)
;; Save all tempfiles in $TMPDIR/emacs$UID/

(defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory "emacs" (user-uid)))
(setq backup-directory-alist
      `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
      `((".*" ,emacs-tmp-dir t)))
(setq auto-save-list-file-prefix
      emacs-tmp-dir)

(global-auto-revert-mode t)

;; disable the bell!!!
(setq ring-bell-function 'ignore)

(when (eq system-type 'darwin)
  (color-theme-initialize)
  (color-theme-solarized-dark))
